import { Component, Injector, OnInit, Optional } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { ActivatedRoute, Router } from '@angular/router';
import { Dialog } from 'src/app/domain/dialog.enum';
import { RequestType } from 'src/app/domain/request-type.enum';
import { IHash, SearchParam } from 'src/app/domain/SearchParam';
import { CustomerService } from 'src/app/layout/customer/service/customer.service';
import { AlertService } from 'src/app/service/alert/alert.service';
import { AutoService } from 'src/app/service/auto.service';
import { GeneralService } from 'src/app/service/general/general.service';
import { Logger } from 'src/app/service/logger/logger.service';
import { SettingService } from 'src/app/service/setting/setting.service';
import { environment as environments } from 'src/environments/environment';
import { ApiService } from '../api.service';

const log = new Logger('AbstractComponent');

@Component({
  selector: 'abstract',
  template: '',
  providers: [AutoService,]
})
export class AbstractComponent implements OnInit {

  isCreate = false;
  isEdit = false;
  isView = false;
  base: string;
  searchUrl: string;
  mode: Dialog;
  creation = Dialog.CREATION;
  edit = Dialog.MODIFICATION;
  delete = Dialog.DELETE;
  currentUser: any;
  requestType: RequestType;
  searchCriteria: SearchParam;
  public displayedColumns: string[];
  public dataSource: any;
  public uniteLibelle = "Unite";
  public agenceLibelle = "Agence";
  alias: IHash = {};
  like: IHash = {};
  equal: IHash = {};
  env: any;


  constructor(@Optional() public injector: Injector) {
    this.env = environments.routes;
  }

  ngOnInit(): void {
    log.info(this.base);
    this.activatedRoute.data.subscribe(data => {
      this.initMode(data.mode);
    });
  }

  builSearchCriterias(searchCriteria: SearchParam = {}) {
    this.searchCriteria = searchCriteria;
  }

  find<T>(tableModel: T) {
    this.apiService.post(this.searchUrl, this.searchCriteria)
<<<<<<< HEAD
      .subscribe(
        (data) => {
          console.log(data);
          this.dataSource = new MatTableDataSource < this.tableModel > ((data as any).returnValue);
        }
      );
=======
      .subscribe((data) => {
        console.log(data);
        this.dataSource = new MatTableDataSource<typeof tableModel>((data as any).returnValue);
        this.dataSource.length = (data as any).returnValue.length;
      });
  }


  findOne(id: string): any {
    this.searchCriteria = new SearchParam;
    this.searchCriteria.equal["id"] = id;
    return this.apiService.post(this.searchUrl, this.searchCriteria)
      .subscribe((data) => (data as any).returnValue);
>>>>>>> 7631414302fbf7594ddf20dcd8cec2cb100058bf
  }

  initMode(mode: Dialog) {
    if (mode) {
      this.mode = mode;
      this.isCreate = mode === Dialog.CREATION;
      this.isEdit = mode === Dialog.MODIFICATION;
      this.isView = mode === Dialog.CONSULTATION;
    }
  }

  public get environment(): any {
    return environments;
  }

  public get settingsService(): SettingService {
    return this.injector.get(SettingService);
  }

  public get generalService(): GeneralService {
    return this.injector.get(GeneralService);
  }

  public get activatedRoute(): ActivatedRoute {
    return this.injector.get(ActivatedRoute);
  }

  public get alertService(): AlertService {
    return this.injector.get(AlertService);
  }

  public get router(): Router {
    return this.injector.get(Router);
  }

  public get formGroupBuilder(): FormBuilder {
    return this.injector.get(FormBuilder);
  }

  public get dialog(): MatDialog {
    return this.injector.get(MatDialog);
  }

  public get customerService(): CustomerService {
    return this.injector.get(CustomerService);
  }

  public get apiService(): ApiService {
    return this.injector.get(ApiService);
  }

  public get logger(): Logger {
    return log;
  }


}
